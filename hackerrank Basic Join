Population Census -> Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
                    Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT SUM(CITY.POPULATION)
    FROM CITY
    JOIN COUNTRY ON CITY.COUNTRYCODE = COUNTRY.CODE
    WHERE COUNTRY.CONTINENT = 'ASIA';

African Cities -> Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
                    Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT CITY.NAME
    FROM CITY
    JOIN COUNTRY ON CITY.COUNTRYCODE = COUNTRY.CODE
    WHERE COUNTRY.CONTINENT = 'AFRICA';

Average Population of Each Continent -> Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.
                    Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION))
    FROM COUNTRY, CITY
    WHERE CITY.COUNTRYCODE = COUNTRY.CODE GROUP BY COUNTRY.CONTINENT

SELECT 
    IF(GRADE >= 8, NAME, NULL), 
    GRADE, 
    MARKS
    FROM 
        STUDENTS, 
        GRADES
    WHERE 
        MARKS >= MIN_MARK 
        AND MARKS <= MAX_MARK
    ORDER BY
        GRADE DESC,
        IF(GRADE >= 8, NAME, NULL) ASC,
        IF(GRADE < 8, MARKS, NULL) ASC;

Top Competitors -> Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

SELECT H.HACKER_ID, H.NAME
    FROM HACKERS H
    JOIN SUBMISSIONS S ON H.HACKER_ID = S.HACKER_ID
    JOIN CHALLENGES C ON S.CHALLENGE_ID = C.CHALLENGE_ID
    JOIN DIFFICULTY D ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL
    WHERE S.SCORE = D.SCORE
    GROUP BY H.HACKER_ID, H.NAME
    HAVING COUNT(DISTINCT S.CHALLENGE_ID) > 1
    ORDER BY COUNT(DISTINCT S.CHALLENGE_ID) DESC, H.HACKER_ID ASC;

Ollivander's Inventory -> Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
                        Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age.

SELECT W.ID, WP.AGE, W.COINS_NEEDED, W.POWER
    FROM WANDS W
    JOIN WANDS_PROPERTY WP ON W.CODE = WP.CODE
    JOIN (
        SELECT WP.AGE, MIN(W.COINS_NEEDED) AS MIN_GOLD, W.POWER
        FROM WANDS W
        JOIN WANDS_PROPERTY WP ON W.CODE = WP.CODE 
        WHERE WP.IS_EVIL = 0
        GROUP BY WP.AGE, W.POWER
    ) MC ON WP.AGE = MC.AGE 
    AND W.POWER = MC.POWER 
    AND W.COINS_NEEDED = MC.MIN_GOLD
ORDER BY W.POWER DESC, WP.AGE DESC;
