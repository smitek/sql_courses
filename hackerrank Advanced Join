Symmetric Pairs -> You are given a table, Functions, containing two columns: X and Y.
                Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.
                Write a query to output all such symmetric pairs in ascending order by the value of X. List the rows such that X1 â‰¤ Y1.

SELECT F1.X, F1.Y
  FROM FUNCTIONS F1, FUNCTIONS F2
  WHERE F1.X = F2.Y AND F2.X = F1.Y
  GROUP BY F1.X, F1.Y
  HAVING COUNT(F1.X)>1 OR F1.X<F1.Y
  ORDER BY F1.X;

Interviews -> Samantha interviews many candidates from different colleges using coding challenges and contests. Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are .
            Note: A specific contest can be used to screen candidates at more than one college, but each college only holds  screening contest.

...

Draw The Triangle 1 -> P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
                    Write a query to print the pattern P(20).

SET @NUMBER = 21;
SELECT REPEAT ('* ',@NUMBER := @NUMBER -1)
    FROM INFORMATION_SCHEMA.TABLES;

Draw The Triangle 2 -> P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
                    Write a query to print the pattern P(20).

SET @NUMBER = 0;
SELECT REPEAT ('* ', @NUMBER := @NUMBER +1)
    FROM INFORMATION_SCHEMA.TABLES
    LIMIT 20;

Print Prime Numbers -> Write a query to print all prime numbers less than or equal to . Print your result on a single line, and use the ampersand () character as your separator (instead of a space).
                    For example, the output for all prime numbers  would be:

SET @prime = 1;
SET @divisor = 1;

SELECT GROUP_CONCAT(a SEPARATOR '&') 
FROM
    (SELECT @prime := @prime + 1 AS a       
    FROM information_schema.tables t1, information_schema.tables t2             
    LIMIT 1000) list_of_potential_primes
WHERE NOT EXISTS (
    SELECT * FROM
        (SELECT @divisor := @divisor + 1 AS b 
        FROM information_schema.tables t3, information_schema.tables t4
        LIMIT 1000) list_of_divisors
    WHERE MOD(a, b) = 0 AND a != b);
